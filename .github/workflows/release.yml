name: Build and Release Docker Image

on:
  release:
    types: [published]
  push:
    tags:
      - 'v*'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  create-release-assets:
    runs-on: ubuntu-latest
    needs: build-and-push-image
    if: github.event_name == 'release'
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create release assets
        run: |
          # Create production docker-compose.yml
          sed 's/build: \./image: ghcr.io\/drkpxl\/geoweld:${{ github.ref_name }}/' docker-compose.yml > docker-compose.prod.yml
          
          # Create deployment bundle
          mkdir geoweld-deployment
          cp docker-compose.prod.yml geoweld-deployment/docker-compose.yml
          cp .env.example geoweld-deployment/
          
          # Create quick start script
          cat > geoweld-deployment/start.sh << 'EOF'
          #!/bin/bash
          echo "Starting GeoWeld..."
          
          # Check if .env exists
          if [ ! -f .env ]; then
            echo "Creating .env file from .env.example"
            cp .env.example .env
            echo "Please edit .env file with your configuration before running 'docker compose up -d'"
            exit 1
          fi
          
          # Start containers
          docker compose up -d
          echo "GeoWeld started! Access at http://localhost:4011"
          EOF
          
          chmod +x geoweld-deployment/start.sh
          
          # Create README
          cat > geoweld-deployment/README.md << 'EOF'
          # GeoWeld Deployment
          
          ## Quick Start
          
          1. Copy `.env.example` to `.env` and configure:
             ```bash
             cp .env.example .env
             # Edit .env with your settings
             ```
          
          2. Start GeoWeld:
             ```bash
             ./start.sh
             ```
             
          Or manually:
             ```bash
             docker compose up -d
             ```
          
          3. Access the web interface at http://localhost:4011
          
          ## Configuration
          
          - Edit `.env` file for environment variables
          - Mapbox token required for map display
          - Data persistence via Docker volumes
          EOF
          
          # Create tar archive
          tar -czf geoweld-deployment-${{ github.ref_name }}.tar.gz geoweld-deployment/

      - name: Upload release assets
        uses: softprops/action-gh-release@v1
        with:
          files: |
            geoweld-deployment-${{ github.ref_name }}.tar.gz
            geoweld-deployment/docker-compose.yml
          generate_release_notes: true

  update-docker-compose:
    runs-on: ubuntu-latest
    needs: [build-and-push-image, create-release-assets]
    if: github.event_name == 'release'
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Update docker-compose.yml with new version
        run: |
          # Update the image tag in docker-compose.yml
          sed -i "s|image: ghcr.io/drkpxl/geoweld:.*|image: ghcr.io/drkpxl/geoweld:${{ github.ref_name }}|" docker-compose.yml
          
          # Check if there are changes
          if git diff --quiet docker-compose.yml; then
            echo "No changes to docker-compose.yml"
            exit 0
          fi
          
          # Configure git
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Commit and push changes
          git add docker-compose.yml
          git commit -m "chore: Update docker-compose.yml to use ${{ github.ref_name }}"
          git push origin main